/**
 * DataProcessor is a class containing various functions for
 * extracting, transforming and checking data to be written to file
 * as .csv file(s)
 */

class DataProcessor {
  // Returns the CSVIntervalData value stored in jsonObj
  extractInternalCSVString(jsonObj) {
    const key = Object.keys(jsonObj);
    return jsonObj[key].Transactions.Transaction.MeterDataNotification
      .CSVIntervalData;
  }

  // Converts CSVIntervalData object to an array and returns
  jsonCSVStrToArr(CSVObj) {
    // Splits the data into rows
    const csvArrRows = CSVObj.split(/\r?\n/);

    // Create an array by spliting each row at each comma
    const csvArrRowsCols = csvArrRows.map((element) => {
      const split = element.split(',');
      // Remove trailing empty element that is created by the trailing commas
      if (split[split.length - 1] === '') {
        split.pop();
      }
      return split;
    });

    return csvArrRowsCols;
  }

  // Extract the 100 and 900 row of data
  // Return header and trailer for files
  getHeaderAndTrailer(CSVArr) {
    let CSVFileHeaderAndTRailer = [];
    for (const element of CSVArr) {
      if (element[0] === '100') {
        CSVFileHeaderAndTRailer[0] = element;
      }
      if (element[0] === '900') {
        CSVFileHeaderAndTRailer[1] = element;
      }
    }

    return CSVFileHeaderAndTRailer;
  }

  // Checks CSVArr contains the correct quantity of row start elements
  // Returns bool
  checkDataValidity(CSVArr) {
    let dataTag100 = 0;
    let dataTag900 = 0;
    let dataTag200 = 0;
    let dataTag300 = 0;

    let dataValid = true;

    // Check each data row at element 0 and tally
    for (const element of CSVArr) {
      if (element[0] === '100') {
        dataTag100++;
      } else if (element[0] === '900') {
        dataTag900++;
      } else if (element[0] === '200') {
        dataTag200++;
      } else if (element[0] === '300') {
        dataTag300++;
      } else {
        dataValid = false;
        throw new Error('Data contains invalid row(s)');
      }
    }

    // Check for valid occurances of each data start element
    if (
      dataTag100 !== 1 ||
      dataTag900 !== 1 ||
      dataTag200 < 1 ||
      dataTag300 < 1
    ) {
      dataValid = false;
      throw new Error('Data contains invalid row occurances');
    }

    return dataValid;
  }

  // Extracts files names from second field in the "200" row
  // Returns an array containing the file names
  getCSVFileNames(CSVArr) {
    let CSVFileNames = [];
    for (const element of CSVArr) {
      if (element[0] === '200') {
        CSVFileNames.push(element[1]);
      }
    }
    return CSVFileNames;
  }

  // Breaks data into seperate blocks
  // A single block of data is the "200" row of data, followed by the repeating rows after, until the next "200", or the "900" trailing line
  // Returns an array containing the seperate blocks of data
  getSeperateDataBlocks(CSVArr) {
    // Get indexes where the data should be split
    let dataBreaks = [];
    for (let i = 0; i < CSVArr.length; i++) {
      if (CSVArr[i][0] === '200' || CSVArr[i][0] === '900') {
        dataBreaks.push(i);
      }
    }

    // Split CSVArr at the data break indexes and push into new array
    let dataBlockArr = [];
    for (let i = 0; i < dataBreaks.length - 1; i++) {
      dataBlockArr.push(CSVArr.slice(dataBreaks[i], dataBreaks[i + 1]));
    }

    return dataBlockArr;
  }

  // Check that all data blocks contain at least 1 300 row (i.e. are populated)
  // Returns bool
  checkBlocksValidity(dataBlockArr) {
    let dataBlockArrValid = true;

    // Check that 300 row is defined and present
    for (let i = 0; i < dataBlockArr.length; i++) {
      if (
        typeof dataBlockArr[i][1] === 'undefined' ||
        dataBlockArr[i][1][0] !== '300'
      ) {
        dataBlockArrValid = false;
        throw new Error(
          'One or more of the data blocks does not contain a 300 row (unpopulated)'
        );
      }
    }
    return dataBlockArrValid;
  }
}

module.exports = DataProcessor;
